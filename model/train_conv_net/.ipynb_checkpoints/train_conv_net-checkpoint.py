{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create CNN model for self-driving car\n",
    "# Code here is based on example from:\n",
    "#     https://github.com/RyanZotti/Self-Driving-Car\n",
    "\n",
    "import tensorflow as tf\n",
    "from Trainer import Trainer, parse_args\n",
    "import os\n",
    "from model import *\n",
    "\n",
    "\n",
    "args = parse_args()\n",
    "data_path = args[\"datapath\"]\n",
    "epochs = args[\"epochs\"]\n",
    "s3_bucket = args['s3_bucket']\n",
    "show_speed = args['show_speed']\n",
    "s3_sync = args['s3_sync']\n",
    "\n",
    "sess = tf.InteractiveSession(config=tf.ConfigProto())\n",
    "\n",
    "x = tf.placeholder(tf.float32, shape=[None, 240, 320, 3], name='x')\n",
    "y_ = tf.placeholder(tf.float32, shape=[None, 3], name='y_')\n",
    "\n",
    "W_conv1 = weight_variable('layer1',[6, 6, 3, 32])\n",
    "b_conv1 = bias_variable('layer1',[32])\n",
    "h_conv1 = tf.nn.relu(conv2d(x, W_conv1) + b_conv1)\n",
    "h_pool1 = max_pool_2x2(h_conv1)\n",
    "\n",
    "W_conv2 = weight_variable('layer2',[6, 6, 32, 64])\n",
    "b_conv2 = bias_variable('layer2',[64])\n",
    "h_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2)\n",
    "h_pool2 = max_pool_2x2(h_conv2)\n",
    "\n",
    "W_fc1 = weight_variable('layer3',[60 * 80 * 64, 512])\n",
    "b_fc1 = bias_variable('layer3',[512])\n",
    "\n",
    "h_pool2_flat = tf.reshape(h_pool2, [-1, 60 * 80 * 64])\n",
    "h_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)\n",
    "\n",
    "dropout_keep_prob = tf.placeholder(tf.float32)\n",
    "h_fc1_drop = tf.nn.dropout(h_fc1, dropout_keep_prob)\n",
    "\n",
    "W_fc2 = weight_variable('layer4',[512, 3])\n",
    "b_fc2 = bias_variable('layer4',[3])\n",
    "logits = tf.add(tf.matmul(h_fc1_drop, W_fc2), b_fc2, name='logits')\n",
    "\n",
    "cross_entropy = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=logits, labels=y_))\n",
    "train_step = tf.train.AdamOptimizer(1e-5,name='train_step').minimize(cross_entropy)\n",
    "correct_prediction = tf.equal(tf.argmax(logits,1), tf.argmax(y_,1))\n",
    "accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32),name='accuracy')\n",
    "\n",
    "model_file = os.path.dirname(os.path.realpath(__file__)) + '/' + os.path.basename(__file__)\n",
    "trainer = Trainer(data_path=data_path,\n",
    "                  model_file=model_file,\n",
    "                  s3_bucket=s3_bucket,\n",
    "                  epochs=epochs,\n",
    "                  max_sample_records=100,\n",
    "                  show_speed=show_speed,\n",
    "                  s3_sync=s3_sync)\n",
    "\n",
    "trainer.train(sess=sess, x=x, y_=y_,\n",
    "              accuracy=accuracy,\n",
    "              train_step=train_step,\n",
    "              train_feed_dict={dropout_keep_prob:0.5},\n",
    "              test_feed_dict={dropout_keep_prob:1.0})"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
